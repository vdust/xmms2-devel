<?xml version="1.0" encoding="utf-8"?>
<!--
vim:expandtab
-->

<ipc version="24" xmlns="https://xmms2.org/ipc.xsd">
    <constant>
        <name>IPC_COMMAND_FIRST</name>
        <value type="integer">32</value>
    </constant>

    <enum>
        <name>ipc_command_special</name>
        <namespace-hint>IPC_COMMAND</namespace-hint>

        <member>REPLY</member>
        <member>ERROR</member>
    </enum>
    <enum>
        <name>ipc_command_signal</name>
        <namespace-hint>IPC_COMMAND</namespace-hint>

        <member ref-value="IPC_COMMAND_FIRST" ref-type="constant">SIGNAL</member>
        <member>BROADCAST</member>
    </enum>

    <enum>
        <name>c2c_reply_policy</name>

        <member>NO_REPLY</member>
        <member>SINGLE_REPLY</member>
        <member>MULTI_REPLY</member>
    </enum>

    <enum>
        <name>collection_changed_action</name>
        <namespace-hint>COLLECTION_CHANGED</namespace-hint>

        <member>ADD</member>
        <member>UPDATE</member>
        <member>RENAME</member>
        <member>REMOVE</member>
    </enum>

    <enum>
        <name>collection_type</name>

        <member>REFERENCE</member>
        <member>UNIVERSE</member>
        <member>UNION</member>
        <member>INTERSECTION</member>
        <member>COMPLEMENT</member>
        <member>HAS</member>
        <member>MATCH</member>
        <member>TOKEN</member>
        <member>EQUALS</member>
        <member>NOTEQUAL</member>
        <member>SMALLER</member>
        <member>SMALLEREQ</member>
        <member>GREATER</member>
        <member>GREATEREQ</member>
        <member>ORDER</member>
        <member>LIMIT</member>
        <member>MEDIASET</member>
        <member>IDLIST</member>
        <member ref-value="IDLIST">LAST</member>
    </enum>

    <enum>
        <name>log_level</name>

        <member>UNKNOWN</member>
        <member>FATAL</member>
        <member>FAIL</member>
        <member>ERROR</member>
        <member>INFO</member>
        <member>DEBUG</member>
        <member>COUNT</member>
    </enum>

    <enum>
        <name>medialib_entry_status</name>

        <member>NEW</member>
        <member>OK</member>
        <member>RESOLVING</member>
        <member>NOT_AVAILABLE</member>
        <member>REHASH</member>
    </enum>

    <enum>
        <name>mediainfo_reader_status</name>

        <member>IDLE</member>
        <member>RUNNING</member>
    </enum>

    <enum>
        <name>playback_seek_mode</name>
        <namespace-hint>PLAYBACK_SEEK</namespace-hint>

        <member value="1">CUR</member>
        <member>SET</member>
    </enum>

    <enum>
        <name>playback_status</name>

        <member>STOP</member>
        <member>PLAY</member>
        <member>PAUSE</member>
    </enum>

    <enum>
        <name>playlist_position_action</name>
        <namespace-hint>PLAYLIST_CURRENT_ID</namespace-hint>

        <member>FORGET</member>
        <member>KEEP</member>
        <member>MOVE_TO_FRONT</member>
    </enum>

    <enum>
        <name>playlist_changed_action</name>
        <namespace-hint>PLAYLIST_CHANGED</namespace-hint>

        <member>ADD</member>
        <member>INSERT</member>
        <member>SHUFFLE</member>
        <member>REMOVE</member>
        <member>CLEAR</member>
        <member>MOVE</member>
        <member>SORT</member>
        <member>UPDATE</member>
        <member>REPLACE</member>
    </enum>

    <enum>
        <name>plugin_type</name>

        <member>ALL</member>
        <member>OUTPUT</member>
        <member>XFORM</member>
    </enum>

    <object>
        <name>main</name>

        <method need_client="true">
            <name>hello</name>

            <documentation>Says hello to the daemon.</documentation>

            <argument>
                <name>protocol_version</name>
                <documentation>The protocol version implemented by the client.</documentation>

                <type>
                    <int />
                </type>
            </argument>

            <argument>
                <name>client</name>
                <documentation>The client's name.</documentation>

                <type>
                    <string />
                </type>
            </argument>

            <return_value>
                <documentation>The calling client's id.</documentation>
                <type>
                    <int/>
                </type>
            </return_value>
        </method>

        <method>
            <name>quit</name>
            <documentation>Shuts down the daemon.</documentation>
        </method>

        <method>
            <name>list_plugins</name>
            <documentation>Retrieves the list of available plugins.</documentation>

            <argument>
                <name>plugin_type</name>
                <documentation>The type of plugins to retrieve.</documentation>

                <type>
                    <enum-value name="plugin_type" />
                </type>
                <default-hint>ALL</default-hint>
            </argument>

            <return_value>
                <documentation>FIXME.</documentation>

                <type>
                    <list>
                        <dictionary>
                            <unknown />
                        </dictionary>
                    </list>
                </type>
            </return_value>
        </method>

        <method>
            <name>stats</name>
            <documentation>Retrieves statistics from the server.</documentation>

            <return_value>
                <documentation>FIXME.</documentation>

                <type>
                    <dictionary>
                        <unknown />
                    </dictionary>
                </type>
            </return_value>
        </method>

        <broadcast>
            <name>quit</name>
            <documentation>This broadcast is triggered when the daemon is shutting down.</documentation>

            <return_value>
                <documentation>The time in seconds that the daemon was running.</documentation>

                <type>
                    <int />
                </type>
            </return_value>
        </broadcast>
    </object>

    <object>
        <name>playlist</name>

        <method>
            <name>replace</name>
            <documentation>Queries ids from a collection and replaces the playlist with the result.</documentation>

            <argument>
                <name>name</name>
                <documentation>The name of the playlist to replace.</documentation>

                <type>
                    <string />
                </type>
                <default-hint>_active</default-hint>
            </argument>

            <argument>
              <name>replacement</name>
              <documentation>The collection to query.</documentation>

              <type>
                <collection />
              </type>
            </argument>

            <argument>
              <name>action</name>
              <documentation>
                How to handle the current position after replacing the entries of the playlist.
                * XMMS_PLAYLIST_CURRENT_ID_FORGET resets the position to -1.
                * XMMS_PLAYLIST_CURRENT_ID_KEEP sets the current position to the last occurrence of the id of current position, or resets to -1 if id is not found.
                * XMMS_PLAYLIST_CURRENT_ID_MOVE_TO_FRONT moves the id of the current position to the beginning of the new playlist, or resets position to -1 if the id is not found.
              </documentation>
              <type>
                <enum-value name="playlist_position_action" />
              </type>
              <default-hint>FORGET</default-hint>
            </argument>
        </method>

        <method>
            <name>set_next</name>
            <documentation>Sets the playlist entry that will be played next.</documentation>

            <argument>
                <name>position</name>
                <documentation>The position of the playlist entry that will be played next (given as an absolute position).</documentation>

                <type>
                    <int />
                </type>
            </argument>

            <return_value>
                <documentation>The ID of the song at the new position of the playlist.</documentation>

                <type>
                    <int />
                </type>
            </return_value>
        </method>

        <method>
            <name>set_next_rel</name>
            <documentation>Sets the playlist entry that will be played next.</documentation>

            <argument>
                <name>position_delta</name>
                <documentation>The position of the playlist entry that will be played next (given relative to the current position).</documentation>

                <type>
                    <int />
                </type>
            </argument>

            <return_value>
                <documentation>The ID of the song at the new position of the playlist.</documentation>

                <type>
                    <int />
                </type>
            </return_value>
        </method>

        <method>
            <name>add_url</name>
            <documentation>Adds an URL to the given playlist.</documentation>

            <argument>
                <name>name</name>
                <documentation>The name of the playlist to which to add a URL.</documentation>

                <type>
                    <string />
                </type>
                <default-hint>_active</default-hint>
            </argument>

            <argument>
                <name>url</name>
                <documentation>The url to be added to the playlist.</documentation>

                <type>
                    <string />
                </type>
            </argument>
        </method>

        <method>
            <name>add_collection</name>
            <documentation>Adds the contents of a collection to the given playlist.</documentation>

            <argument>
                <name>name</name>
                <documentation>The name of the playlist to which to add the collection.</documentation>

                <type>
                    <string />
                </type>
                <default-hint>_active</default-hint>
            </argument>

            <argument>
                <name>collection</name>
                <documentation>The collection to be added to the playlist.</documentation>

                <type>
                    <collection />
                </type>
            </argument>

        </method>

        <method>
            <name>remove_entry</name>
            <documentation>Removes an entry from the given playlist.</documentation>

            <argument>
                <name>name</name>
                <documentation>The playlist whose entry is to be removed.</documentation>

                <type>
                    <string />
                </type>
                <default-hint>_active</default-hint>
            </argument>

            <argument>
                <name>position</name>
                <documentation>The position of the entry to remove.</documentation>

                <type>
                    <int />
                </type>
            </argument>
        </method>

        <method>
            <name>move_entry</name>
            <documentation>Moves a playlist entry to a new position (absolute move).</documentation>

            <argument>
                <name>name</name>
                <documentation>The playlist whose entry is to be moved.</documentation>

                <type>
                    <string />
                </type>
                <default-hint>_active</default-hint>
            </argument>

            <argument>
                <name>position</name>
                <documentation>The current position of the entry to move.</documentation>

                <type>
                    <int />
                </type>
            </argument>

            <argument>
                <name>new_position</name>
                <documentation>The new position of the entry to move.</documentation>

                <type>
                    <int />
                </type>
            </argument>
        </method>

        <method>
            <name>list_entries</name>
            <documentation>Lists the contents of the given playlist.</documentation>

            <argument>
                <name>name</name>
                <documentation>The name of the playlist whose contents will be listed.</documentation>

                <type>
                    <string />
                </type>
                <default-hint>_active</default-hint>
            </argument>

            <return_value>
                <documentation>The IDs of the songs that make up the playlist.</documentation>

                <type>
                    <list>
                        <int />
                    </list>
                </type>
            </return_value>
        </method>

        <method>
            <name>current_pos</name>
            <documentation>Retrieves the current position in the playlist with the given name.</documentation>

            <argument>
                <name>name</name>
                <documentation>The name of the playlist for which to retrieve the current position.</documentation>

                <type>
                    <string />
                </type>
                <default-hint>_active</default-hint>
            </argument>

            <return_value>
                <documentation>A dictionary containing the current position of the playlist and the name of the playlist.</documentation>

                <type>
                    <dictionary>
                        <unknown />
                    </dictionary>
                </type>
            </return_value>
        </method>

        <method>
            <name>current_active</name>
            <documentation>Retrieves the name of the currently active playlist.</documentation>

            <return_value>
                <documentation>The name of the currently active playlist.</documentation>

                <type>
                    <string />
                </type>
            </return_value>
        </method>

        <method>
            <name>insert_url</name>
            <documentation>Inserts an URL into the given playlist.</documentation>

            <argument>
                <name>name</name>
                <documentation>The name of the playlist into which the URL is to be inserted.</documentation>

                <type>
                    <string />
                </type>
                <default-hint>_active</default-hint>
            </argument>

            <argument>
                <name>position</name>
                <documentation>The playlist position to insert the URL.</documentation>

                <type>
                    <int />
                </type>
            </argument>

            <argument>
                <name>url</name>
                <documentation>The URL to be inserted into the playlist.</documentation>

                <type>
                    <string />
                </type>
            </argument>
        </method>

        <method>
            <name>insert_collection</name>
            <documentation>Inserts the contents of a collection into the given playlist.</documentation>

            <argument>
                <name>name</name>
                <documentation>The name of the playlist into which the collection is to be inserted.</documentation>

                <type>
                    <string />
                </type>
                <default-hint>_active</default-hint>
            </argument>

            <argument>
                <name>position</name>
                <documentation>The playlist position to insert the collection.</documentation>

                <type>
                    <int />
                </type>
            </argument>

            <argument>
                <name>collection</name>
                <documentation>The collection to be inserted into the playlist.</documentation>

                <type>
                    <collection />
                </type>
            </argument>
        </method>

        <method>
            <name>load</name>
            <documentation>Loads the playlist with the given name.</documentation>

            <argument>
                <name>name</name>
                <documentation>The name of the playlist that will be loaded.</documentation>

                <type>
                    <string />
                </type>
                <default-hint>_active</default-hint>
            </argument>
        </method>

        <method>
            <name>radd</name>
            <documentation>Adds a directory recursively to the playlist with the given name.</documentation>

            <argument>
                <name>name</name>
                <documentation>The name of the playlist that will be modified.</documentation>

                <type>
                    <string />
                </type>
                <default-hint>_active</default-hint>
            </argument>

            <argument>
                <name>url</name>
                <documentation>The directory's URL.</documentation>

                <type>
                    <string />
                </type>
            </argument>
        </method>

        <method>
            <name>rinsert</name>
            <documentation>Insert a directory recursively into the playlist with the given name at the given position.</documentation>

            <argument>
                <name>name</name>
                <documentation>The name of the playlist that will be modified.</documentation>

                <type>
                    <string />
                </type>
                <default-hint>_active</default-hint>
            </argument>

            <argument>
                <name>position</name>
                <documentation>The position at which to insert the directory.</documentation>

                <type>
                    <int />
                </type>
            </argument>

            <argument>
                <name>url</name>
                <documentation>The directory's URL.</documentation>

                <type>
                    <string />
                </type>
            </argument>
        </method>

        <broadcast>
            <name>changed</name>
            <documentation>This broadcast is triggered when the playlist changes.</documentation>

            <return_value>
                <documentation>A dictionary that describes the playlist that was changed.</documentation>

                <type>
                    <dictionary>
                        <unknown />
                    </dictionary>
                </type>
            </return_value>
        </broadcast>

        <broadcast>
            <name>current_pos</name>
            <documentation>This broadcast is triggered when the position in the playlist changes.</documentation>

            <return_value>
                <documentation>The currently played song's media ID.</documentation>

                <type>
                    <dictionary>
                        <unknown />
                    </dictionary>
                </type>
            </return_value>
        </broadcast>

        <broadcast>
            <name>loaded</name>
            <documentation>This broadcast is triggered when another playlist is loaded.</documentation>

            <return_value>
                <documentation>The loaded playlist's name.</documentation>

                <type>
                    <string />
                </type>
            </return_value>
        </broadcast>
    </object>

    <object>
        <name>config</name>

        <method>
            <name>get_value</name>
            <documentation>Retrieves the value of the config property with the given key.</documentation>

            <argument>
                <name>key</name>
                <documentation>The key of the config property to retrieve.</documentation>

                <type>
                    <string />
                </type>
            </argument>

            <return_value>
                <documentation>The value of the config property.</documentation>

                <type>
                    <string />
                </type>
            </return_value>
        </method>

        <method>
            <name>set_value</name>
            <documentation>Sets the value of the config property with the given key.</documentation>

            <argument>
                <name>key</name>
                <documentation>The key of the config property to set.</documentation>

                <type>
                    <string />
                </type>
            </argument>

            <argument>
                <name>value</name>
                <documentation>The new value of the config property.</documentation>

                <type>
                    <string />
                </type>
            </argument>
        </method>

        <method>
            <name>register_value</name>
            <documentation>Registers a new config property for the connected client.</documentation>

            <argument>
                <name>key</name>
                <documentation>The key of the new config property.</documentation>

                <type>
                    <string />
                </type>
            </argument>

            <argument>
                <name>value</name>
                <documentation>The value of the new config property.</documentation>

                <type>
                    <string />
                </type>
            </argument>

            <return_value>
                <documentation>The full path of the config property that was registered.</documentation>

                <type>
                    <string />
                </type>
            </return_value>
        </method>

        <method>
            <name>list_values</name>
            <documentation>Retrieves the list of known config properties.</documentation>

            <return_value>
                <documentation>The list of known config properties.</documentation>

                <type>
                    <dictionary>
                        <string />
                    </dictionary>
                </type>
            </return_value>
        </method>

        <broadcast>
            <name>value_changed</name>
            <documentation>This broadcast is triggered when the value of any config property changes.</documentation>

            <return_value>
                <documentation>A dictionary that maps the key of the config property to the new value of the config property.</documentation>

                <type>
                    <dictionary>
                        <string />
                    </dictionary>
                </type>
            </return_value>
        </broadcast>
    </object>

    <object>
        <name>playback</name>

        <method>
            <name>start</name>
            <documentation>Starts playback.</documentation>
        </method>

        <method>
            <name>stop</name>
            <documentation>Stops playback.</documentation>
        </method>

        <method>
            <name>pause</name>
            <documentation>Pauses playback.</documentation>
        </method>

        <method>
            <name>tickle</name>
            <documentation>Stops decoding of the current song. This will start decoding of the song set with the playlist_set_next command or the current song again if the playlist_set_next command wasn't executed.</documentation>
        </method>

        <method>
            <name>playtime</name>
            <documentation>Retrieves the current playtime.</documentation>

            <return_value>
                <documentation>The current playtime.</documentation>

                <type>
                    <int />
                </type>
            </return_value>
        </method>

        <method>
            <name>seek_ms</name>
            <documentation>Seeks to a position in the currently played song (given in milliseconds).</documentation>

            <argument>
                <name>offset</name>
                <documentation>The position in the song in milliseconds.</documentation>

                <type>
                    <int />
                </type>
            </argument>

            <argument>
                <name>whence</name>
                <documentation>Specifies how the absolute position in milliseconds is determined. If whence is XMMS_PLAYBACK_SEEK_SET, the argument is treated as an absolute value. If whence is XMMS_PLAYBACK_SEEK_CUR, the new position is computed by adding the argument to the current position.</documentation>

                <type>
                    <enum-value name="playback_seek_mode" />
                </type>
                <default-hint>SET</default-hint>
            </argument>
        </method>

        <method>
            <name>seek_samples</name>
            <documentation>Seeks to a position in the currently played song (given in samples).</documentation>

            <argument>
                <name>offset</name>
                <documentation>The position in the song in samples.</documentation>

                <type>
                    <int />
                </type>
            </argument>

            <argument>
                <name>whence</name>
                <documentation>Specifies how the absolute position in samples is determined. If whence is XMMS_PLAYBACK_SEEK_SET, the argument is treated as an absolute value. If whence is XMMS_PLAYBACK_SEEK_CUR, the new position is computed by adding the argument to the current position.</documentation>

                <type>
                    <enum-value name="playback_seek_mode" />
                </type>
                <default-hint>SET</default-hint>
            </argument>
        </method>

        <method>
            <name>status</name>
            <documentation>Retrieves the current playback status.</documentation>

            <return_value>
                <documentation>The current playback status.</documentation>

                <type>
                    <enum-value name="playback_status" />
                </type>
            </return_value>
        </method>

        <method>
            <name>current_id</name>
            <documentation>Retrieves the ID of the song that's currently being played.</documentation>

            <return_value>
                <documentation>The ID of the song that's currently being played.</documentation>

                <type>
                    <int />
                </type>
            </return_value>
        </method>

        <method>
            <name>volume_set</name>
            <documentation>Changes the volume for the given channel.</documentation>

            <argument>
                <name>channel</name>
                <documentation>The name of the channel of which the volume is set.</documentation>

                <type>
                    <string />
                </type>
            </argument>

            <argument>
                <name>volume</name>
                <documentation>The new volume.</documentation>

                <type>
                    <int />
                </type>
            </argument>
        </method>

        <method>
            <name>volume_get</name>
            <documentation>Retrieves the volume of all available channels.</documentation>

            <return_value>
                <documentation>A dictionary that maps the volume channels to the current playback volume.</documentation>

                <type>
                    <dictionary>
                        <int />
                    </dictionary>
                </type>
            </return_value>
        </method>

        <broadcast>
            <name>status</name>
            <documentation>This broadcast is triggered when the playback status changes.</documentation>

            <return_value>
                <documentation>The current playback status.</documentation>

                <type>
                    <enum-value name="playback_status" />
                </type>
            </return_value>
        </broadcast>

        <broadcast>
            <name>volume_changed</name>
            <documentation>This broadcast is triggered when the playback volume changes.</documentation>

            <return_value>
                <documentation>A dictionary that maps the volume channels to the current playback volume.</documentation>

                <type>
                    <dictionary>
                        <int />
                    </dictionary>
                </type>
            </return_value>
        </broadcast>

        <broadcast>
            <name>current_id</name>
            <documentation>This broadcast is triggered when the played song's media ID changes.</documentation>

            <return_value>
                <documentation>The currently played song's media ID.</documentation>

                <type>
                    <int />
                </type>
            </return_value>
        </broadcast>

        <signal>
            <name>playtime</name>
            <documentation>Emits the current playtime.</documentation>

            <return_value>
                <documentation>The current playtime.</documentation>

                <type>
                    <int />
                </type>
            </return_value>
        </signal>
    </object>

    <object>
        <name>medialib</name>

        <method>
            <name>get_info</name>
            <documentation>Retrieves information about a medialib entry.</documentation>

            <argument>
                <name>id</name>
                <documentation>The ID of the medialib entry.</documentation>

                <type>
                    <int />
                </type>
            </argument>

            <return_value>
                <documentation>The information about the medialib entry.</documentation>

                <type>
                    <!-- get_info returns a dictionary of dictionaries
                         of unknown values.
                      -->
                    <dictionary>
                        <dictionary>
                            <unknown />
                        </dictionary>
                    </dictionary>
                </type>
            </return_value>
        </method>

        <method>
            <name>import_path</name>
            <documentation>Adds a directory recursively to the medialib.</documentation>

            <argument>
                <name>directory</name>
                <documentation>The directory to add to the medialib (given in URL encoding).</documentation>

                <type>
                    <string />
                </type>
            </argument>
        </method>

        <method>
            <name>rehash</name>
            <documentation>Rehashes the medialib. This will make sure that the data in the medialib is the same as the data in the files. </documentation>

            <argument>
                <name>id</name>
                <documentation>The ID of the song to rehash. If this is zero the whole medialib will be rehashed.</documentation>

                <type>
                    <int />
                </type>
                <default-hint>0</default-hint>
            </argument>
        </method>

        <method>
            <name>get_id</name>
            <documentation>Retrieves the medialib ID that belongs to the given URL.</documentation>

            <argument>
                <name>url</name>
                <documentation>The URL to look for in the medialib.</documentation>

                <type>
                    <string />
                </type>
            </argument>

            <return_value>
                <documentation>The medialib ID associated with the URL.</documentation>

                <type>
                    <int />
                </type>
            </return_value>
        </method>

        <method>
            <name>remove_entry</name>
            <documentation>Removes an entry from the medialib.</documentation>

            <argument>
                <name>id</name>
                <documentation>The ID of the medialib entry to remove.</documentation>

                <type>
                    <int />
                </type>
            </argument>
        </method>

        <method>
            <name>set_property_string</name>
            <documentation>Sets a medialib property to a string value.</documentation>

            <argument>
                <name>id</name>
                <documentation>The ID of the medialib entry to manipulate.</documentation>

                <type>
                    <int />
                </type>
            </argument>

            <argument>
                <name>source</name>
                <documentation>The source which is to set the medialib property (e.g. plugin/id3v2).</documentation>

                <type>
                    <string />
                </type>
            </argument>

            <argument>
                <name>key</name>
                <documentation>The key of the property to write.</documentation>

                <type>
                    <string />
                </type>
            </argument>

            <argument>
                <name>value</name>
                <documentation>The new value of the property.</documentation>

                <type>
                    <string />
                </type>
            </argument>
        </method>

        <method>
            <name>set_property_int</name>
            <documentation>Sets a medialib property to an integer value.</documentation>

            <argument>
                <name>id</name>
                <documentation>The ID of the medialib entry to manipulate.</documentation>

                <type>
                    <int />
                </type>
            </argument>

            <argument>
                <name>source</name>
                <documentation>The source which is to set the medialib property (e.g. plugin/id3v2).</documentation>

                <type>
                    <string />
                </type>
            </argument>

            <argument>
                <name>key</name>
                <documentation>The key of the property to write.</documentation>

                <type>
                    <string />
                </type>
            </argument>

            <argument>
                <name>value</name>
                <documentation>The new value of the property.</documentation>

                <type>
                    <int />
                </type>
            </argument>
        </method>

        <method>
            <name>remove_property</name>
            <documentation>Removes a propert from a medialib entry.</documentation>

            <argument>
                <name>id</name>
                <documentation>The ID of the medialib entry to manipulate.</documentation>

                <type>
                    <int />
                </type>
            </argument>

            <argument>
                <name>source</name>
                <documentation>The source which is to set the medialib property (e.g. plugin/id3v2).</documentation>

                <type>
                    <string />
                </type>
            </argument>

            <argument>
                <name>key</name>
                <documentation>The key of the property to remove.</documentation>

                <type>
                    <string />
                </type>
            </argument>
        </method>

        <method>
            <name>move_entry</name>
            <documentation>Updates the URL of a medialib entry that has been moved to a new location.</documentation>

            <argument>
                <name>id</name>
                <documentation>The ID of the medialib entry to move.</documentation>

                <type>
                    <int />
                </type>
            </argument>

            <argument>
                <name>url</name>
                <documentation>The new URL of the medialib entry.</documentation>

                <type>
                    <string />
                </type>
            </argument>
        </method>

        <method>
            <name>add_entry</name>
            <documentation>Add the given URL to the medialib.</documentation>

            <argument>
                <name>url</name>
                <documentation>The URL to add to the medialib.</documentation>

                <type>
                    <string />
                </type>
            </argument>
        </method>

        <broadcast>
            <name>entry_added</name>
            <documentation>This broadcast is triggered when an entry is added to the medialib.</documentation>

            <return_value>
                <documentation>The added entry's ID.</documentation>

                <type>
                    <int />
                </type>
            </return_value>
        </broadcast>

        <broadcast>
            <name>entry_changed</name>
            <documentation>This broadcast is triggered when the properties of a medialib entry are changed.</documentation>

            <return_value>
                <documentation>The changed entry's ID.</documentation>

                <type>
                    <int />
                </type>
            </return_value>
        </broadcast>

        <broadcast>
          <name>entry_removed</name>
          <documentation>This broadcast is triggered when a medialib entry is removed.</documentation>

          <return_value>
            <documentation>The changed entry's ID.</documentation>

            <type>
              <int />
            </type>
          </return_value>
        </broadcast>
    </object>

    <object>
        <name>collection</name>

        <method>
            <name>get</name>
            <documentation>Retrieves the structure of a given collection.</documentation>

            <argument>
                <name>name</name>
                <documentation>The name of the collection to retrieve.</documentation>

                <type>
                    <string />
                </type>
            </argument>

            <argument>
                <name>namespace</name>
                <documentation>The namespace in which to look for the collection.</documentation>

                <type>
                    <string />
                </type>
                <default-hint>Collections</default-hint>
            </argument>

            <return_value>
                <documentation>The collection structure if found, NULL otherwise.</documentation>

                <type>
                    <collection />
                </type>
            </return_value>
        </method>

        <method>
            <name>list</name>
            <documentation>Lists the collections in the given namespace.</documentation>

            <argument>
                <name>namespace</name>
                <documentation>The namespace to list collections from.</documentation>

                <type>
                    <string />
                </type>
                <default-hint>Collections</default-hint>
            </argument>

            <return_value>
                <documentation>The list of collection names.</documentation>

                <type>
                    <list>
                        <string />
                    </list>
                </type>
            </return_value>
        </method>

        <method>
            <name>save</name>
            <documentation>Save the given collection in the DAG under the given name in the given namespace.</documentation>

            <argument>
                <name>name</name>
                <documentation>The name under which to save the collection.</documentation>

                <type>
                    <string />
                </type>
            </argument>

            <argument>
                <name>namespace</name>
                <documentation>The namespace in which to save the collection.</documentation>

                <type>
                    <string />
                </type>
                <default-hint>Collections</default-hint>
            </argument>

            <argument>
                <name>collection</name>
                <documentation>The collection structure to save.</documentation>

                <type>
                    <collection />
                </type>
            </argument>
        </method>

        <method>
            <name>remove</name>
            <documentation>Remove the given collection from the DAG.</documentation>

            <argument>
                <name>name</name>
                <documentation>The name of the collection to remove.</documentation>

                <type>
                    <string />
                </type>
            </argument>

            <argument>
                <name>namespace</name>
                <documentation>The namespace where the collection to remove is.</documentation>

                <type>
                    <string />
                </type>
                <default-hint>Collections</default-hint>
            </argument>
        </method>

        <method>
            <name>find</name>
            <documentation>Find all collections in the given namespace that contain a given media.</documentation>

            <argument>
                <name>id</name>
                <documentation>The id of the media.</documentation>

                <type>
                    <int />
                </type>
            </argument>

            <argument>
                <name>namespace</name>
                <documentation>The namespace in which to look for collections.</documentation>

                <type>
                    <string />
                </type>
                <default-hint>Collections</default-hint>
            </argument>

            <return_value>
                <documentation>The list of collection names.</documentation>

                <type>
                    <list>
                        <string />
                    </list>
                </type>
            </return_value>
        </method>

        <method>
            <name>rename</name>
            <documentation>Rename a collection in the given namespace.</documentation>

            <argument>
                <name>name</name>
                <documentation>The name of the collection to rename.</documentation>

                <type>
                    <string />
                </type>
            </argument>

            <argument>
                <name>new_name</name>
                <documentation>The new name of the collection.</documentation>

                <type>
                    <string />
                </type>
            </argument>

            <argument>
                <name>namespace</name>
                <documentation>The namespace to consider.</documentation>

                <type>
                    <string />
                </type>
                <default-hint>Collections</default-hint>
            </argument>
        </method>

        <method>
            <name>query</name>
            <documentation>FIXME.</documentation>

            <argument>
                <name>collection</name>
                <documentation>FIXME.</documentation>

                <type>
                    <collection />
                </type>
            </argument>

            <argument>
                <name>fetch</name>
                <documentation>Specifies what to fetch.</documentation>

                <type>
                    <dictionary>
                        <unknown/>
                    </dictionary>
                </type>
            </argument>

            <return_value>
                <documentation>A return value as requested by fetch.</documentation>

                <type>
                    <unknown/>
                </type>
            </return_value>
        </method>

        <method>
            <name>query_infos</name>
            <documentation>FIXME.</documentation>

            <argument>
                <name>collection</name>
                <documentation>FIXME.</documentation>

                <type>
                    <collection />
                </type>
            </argument>

            <argument>
                <name>limit_start</name>
                <documentation>FIXME.</documentation>

                <type>
                    <int />
                </type>
            </argument>

            <argument>
                <name>limit_length</name>
                <documentation>FIXME.</documentation>

                <type>
                    <int />
                </type>
            </argument>

            <argument>
                <name>properties</name>
                <documentation>The list of properties to be retrieved (may not be empty).</documentation>

                <type>
                    <list>
                        <string />
                    </list>
                </type>
            </argument>

            <argument>
                <name>group_by</name>
                <documentation>The list of properties to group by.</documentation>

                <type>
                    <list>
                        <string />
                    </list>
                </type>
            </argument>

            <return_value>
                <documentation>FIXME.</documentation>

                <type>
                    <list>
                        <dictionary>
                            <unknown />
                        </dictionary>
                    </list>
                </type>
            </return_value>
        </method>

        <method>
            <name>idlist_from_playlist</name>
            <documentation>FIXME.</documentation>

            <argument>
                <name>url</name>
                <documentation>The URL of the playlist.</documentation>

                <type>
                    <string />
                </type>
            </argument>

            <return_value>
                <documentation>FIXME.</documentation>

                <type>
                    <collection />
                </type>
            </return_value>
        </method>

        <broadcast>
            <name>changed</name>
            <documentation>This broadcast is triggered when a collection is changed.</documentation>

            <return_value>
                <documentation>A dictionary that describes the collection that was changed.</documentation>

                <type>
                    <dictionary>
                        <unknown />
                    </dictionary>
                </type>
            </return_value>
        </broadcast>
    </object>

    <object>
        <name>visualization</name>

        <method>
            <name>query_version</name>
            <documentation>Retrieves the visualization version.</documentation>

            <return_value>
                <documentation>The visualization version.</documentation>

                <type>
                    <int />
                </type>
            </return_value>
        </method>

        <method>
            <name>register</name>
            <documentation>Registers a visualization client.</documentation>

            <return_value>
                <documentation>The visualization client ID.</documentation>

                <type>
                    <int />
                </type>
            </return_value>
        </method>

        <method>
            <name>init_shm</name>
            <documentation>FIXME.</documentation>

            <argument>
                <name>id</name>
                <documentation>The visualization client ID.</documentation>

                <type>
                    <int />
                </type>
            </argument>

            <argument>
                <name>shm_id</name>
                <documentation>FIXME.</documentation>

                <type>
                    <string />
                </type>
            </argument>

            <return_value>
                <documentation>The semaphore ID.</documentation>

                <type>
                    <int />
                </type>
            </return_value>
        </method>

        <method>
            <name>init_udp</name>
            <documentation>FIXME.</documentation>

            <argument>
                <name>id</name>
                <documentation>The visualization client ID.</documentation>

                <type>
                    <int />
                </type>
            </argument>

            <return_value>
                <documentation>The UDP port.</documentation>

                <type>
                    <int />
                </type>
            </return_value>
        </method>

        <method>
            <name>set_property</name>
            <documentation>Delivers one property.</documentation>

            <argument>
                <name>id</name>
                <documentation>The visualization client ID.</documentation>

                <type>
                    <int />
                </type>
            </argument>

            <argument>
                <name>key</name>
                <documentation>The property's key.</documentation>

                <type>
                    <string />
                </type>
            </argument>

            <argument>
                <name>value</name>
                <documentation>The property's value.</documentation>

                <type>
                    <string />
                </type>
            </argument>

            <return_value>
                <documentation>FIXME.</documentation>

                <type>
                    <int />
                </type>
            </return_value>
        </method>

        <method>
            <name>set_properties</name>
            <documentation>Delivers one or more properties.</documentation>

            <argument>
                <name>id</name>
                <documentation>The visualization client ID.</documentation>

                <type>
                    <int />
                </type>
            </argument>

            <argument>
                <name>properties</name>
                <documentation>The properties to set.</documentation>

                <type>
                    <dictionary>
                        <string />
                    </dictionary>
                </type>
            </argument>

            <return_value>
                <documentation>FIXME.</documentation>

                <type>
                    <int />
                </type>
            </return_value>
        </method>

        <method>
            <name>shutdown</name>
            <documentation>Shuts down the visualization client.</documentation>

            <argument>
                <name>id</name>
                <documentation>The visualization client ID.</documentation>

                <type>
                    <int />
                </type>
            </argument>
        </method>
    </object>

    <object>
        <name>mediainfo_reader</name>

        <broadcast>
            <name>status</name>
            <documentation>This broadcast is triggered when the status of the mediainfo reader changes.</documentation>

            <return_value>
                <documentation>The current status of the mediainfo reader.</documentation>

                <type>
                    <enum-value name="mediainfo_reader_status" />
                </type>
            </return_value>
        </broadcast>

        <signal>
            <name>unindexed</name>
            <documentation>Emits the number of unresolved medialib entries.</documentation>

            <return_value>
                <documentation>The number of unresolved medialib entries.</documentation>

                <type>
                    <int />
                </type>
            </return_value>
        </signal>
    </object>

    <object>
        <name>xform</name>

        <method>
            <name>browse</name>
            <documentation>Retrieves a list of paths available (directly) under the given path.</documentation>

            <argument>
                <name>url</name>
                <documentation>The path to browse.</documentation>

                <type>
                    <string />
                </type>
            </argument>

            <return_value>
                <documentation>The list of found paths.</documentation>

                <type>
                    <list>
                        <dictionary>
                            <unknown />
                        </dictionary>
                    </list>
                </type>
            </return_value>
        </method>
    </object>

    <object>
        <name>bindata</name>

        <method>
            <name>retrieve</name>
            <documentation>Retrieves a file from the server's bindata directory given the file's hash.</documentation>

            <argument>
                <name>hash</name>
                <documentation>The file's hash.</documentation>

                <type>
                    <string />
                </type>
            </argument>

            <return_value>
                <documentation>The file's contents.</documentation>

                <type>
                    <binary />
                </type>
            </return_value>
        </method>

        <method>
            <name>add</name>
            <documentation>Adds binary data to the server's bindata directory.</documentation>

            <argument>
                <name>raw_data</name>
                <documentation>The data to add.</documentation>

                <type>
                    <binary />
                </type>
            </argument>

            <return_value>
                <documentation>The data's hash.</documentation>

                <type>
                    <string />
                </type>
            </return_value>
        </method>

        <method>
            <name>remove</name>
            <documentation>Removes binary data from the server's bindata directory.</documentation>

            <argument>
                <name>hash</name>
                <documentation>The data's hash.</documentation>

                <type>
                    <string />
                </type>
            </argument>
        </method>

        <method>
            <name>list</name>
            <documentation>Retrieves a list of binary data hashes from the server's bindata directory.</documentation>

            <return_value>
                <documentation>The available binary data hashes.</documentation>

                <type>
                    <list>
                        <string />
                    </list>
                </type>
            </return_value>
        </method>
    </object>

    <object>
        <name>coll_sync</name>
        <method>
            <name>sync</name>
            <documentation>Save collections to disk.</documentation>
        </method>
    </object>

    <object>
        <name>courier</name>

        <method noreply="true" need_client="true" need_cookie="true">
            <name>send_message</name>
            <documentation>Assemble and send a client-to-client message.</documentation>

            <argument>
                <name>to_client</name>
                <documentation>The destination client id.</documentation>

                <type>
                    <int />
                </type>
            </argument>

            <argument>
                <name>reply_policy</name>
                <documentation>The reply policy for this message</documentation>

                <type>
                    <enum-value name="c2c_reply_policy" />
                </type>
           </argument>

            <argument>
                <name>payload</name>
                <documentation>The contents of the message.</documentation>

                <type>
                    <dictionary>
                        <unknown />
                    </dictionary>
                </type>
            </argument>
        </method>

        <method noreply="true" need_client="true" need_cookie="true">
            <name>reply</name>
            <documentation>Assemble and send a reply to a client-to-client message</documentation>

            <argument>
                <name>message_id</name>
                <documentation>The id of the message.</documentation>

                <type>
                    <int />
                </type>
            </argument>

            <argument>
                <name>reply_policy</name>
                <documentation>The reply policy for this message.</documentation>

                <type>
                    <enum-value name="c2c_reply_policy" />
                </type>
            </argument>

            <argument>
                <name>payload</name>
                <documentation>The contents of the reply.</documentation>

                <type>
                    <unknown />
                </type>
            </argument>
        </method>

        <method>
            <name>get_connected_clients</name>
            <documentation>Return a list of connected clients.</documentation>

            <return_value>
                <documentation>A list of ids.</documentation>
                <type>
                    <list>
                        <int/>
                    </list>
                </type>
            </return_value>
        </method>

        <method need_client="true">
            <name>ready</name>
            <documentation>Notify the server that the client's api is ready for query.</documentation>
        </method>

        <method>
            <name>get_ready_clients</name>
            <documentation>Return a list of clients ready for c2c communication</documentation>

            <return_value>
                <documentation>A list of ids.</documentation>
                <type>
                    <list>
                        <int/>
                    </list>
                </type>
            </return_value>
        </method>

        <broadcast>
            <name>message</name>
            <documentation>This broadcast carries client-to-client messages.</documentation>

            <return_value>
                <documentation>Messages sent to the client.</documentation>

                <type>
                    <dictionary>
                        <unknown />
                    </dictionary>
                </type>
            </return_value>
        </broadcast>

        <broadcast>
            <name>ready</name>
            <documentation>This broadcast is emitted when a client's services are ready.</documentation>
            <return_value>
                <documentation>The client's id.</documentation>
                <type>
                    <int />
                </type>
            </return_value>
        </broadcast>
    </object>

    <object>
        <name>ipc_manager</name>

        <broadcast>
            <name>client_connected</name>
            <documentation>This broadcast is emitted when a new client connects.</documentation>

            <return_value>
                <documentation>The new client's id.</documentation>

                <type>
                    <int />
                </type>
            </return_value>
        </broadcast>

        <broadcast>
            <name>client_disconnected</name>
            <documentation>This broadcast is emitted when a client disconnects.</documentation>

            <return_value>
                <documentation>The disconnected client's id.</documentation>

                <type>
                    <int />
                </type>
            </return_value>
        </broadcast>
    </object>
</ipc>
